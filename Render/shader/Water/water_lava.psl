
struct PS_INPUT
{
	float3 uv_volume:TEXCOORD0;
	float2 uv_ground:TEXCOORD1;
    float4  diffuse: COLOR0;
    
	float2 uv_lightmap:TEXCOORD3;
};

sampler3D VolumeSampler:register(s0);
sampler2D GroundSampler:register(s1);
float time:register(c0);

sampler2D LightMapSampler:register(s3);
float4 vFogOfWar:register(c3);
float3 vLavaColor;//float3(0.8,0.8,0.4)
float3 vLavaColorAmbient;//float3(0.5,0,0)

float4 main(const PS_INPUT v):COLOR
{
/*
	float3 sample=v.uv_volume;
	sample.z+=time;
	float4 ot=tex3D(VolumeSampler,sample);
	return ot;
*/
	float rnd = 0.0f;
	float f = 1;
	float fcoord=0.2f;
	float3 Coord = v.uv_volume;
	Coord.z+=time;
	for (int i = 0; i < 4; i++)
	{
		half4 fnoise = tex3D(VolumeSampler, Coord * fcoord);
		fnoise -=.55;
		fnoise *= 2.0f;
		rnd += ( fnoise.x) * f;
		f *= 0.5;
		fcoord*=3;
	}
	
//	rnd=rnd+0.1;
//	rnd=pow(rnd,5);
	float4 ot;
	ot.rgb=rnd*vLavaColor+vLavaColorAmbient;
	ot.rgb=max(ot.rgb,tex2D(GroundSampler,v.uv_ground));
	ot.a=v.diffuse.a;
#ifdef FOG_OF_WAR
	float4 lightmap=tex2D(LightMapSampler,v.uv_lightmap);
	ot.rgb=lerp(ot.rgb,vFogOfWar,lightmap.a);
#endif	
	
	return ot;
}
